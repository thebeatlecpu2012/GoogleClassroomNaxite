#intro {
  margin: 0px 0% 0px 0%;
}

body:before {

 content: "";
 position: fixed;
 left: 0; right: 0;
 top: 0; bottom: 0;
 background: linear-gradient(45deg, rgba(0, 0, 0, 0.62), rgba(0, 0, 0, 0.56) 90%);
 /*background: linear-gradient(15deg, rgba(42, 27, 161, 0.2), rgba(255, 10, 20, 0.26) 90%);*/
 z-index: -99999;

}

.heavytint:before {

 content: "";
 position: fixed;
 left: 0; right: 0;
 top: 0; bottom: 0;
 background: linear-gradient(45deg, rgba(120, 80, 80, .90), rgba(120, 80, 80, 0.90) 90%);
 /*background: linear-gradient(15deg, rgba(42, 27, 161, 0.2), rgba(255, 10, 20, 0.26) 90%);*/
 z-index: -99999;

}
html,
body {
margin: 0;
padding: 0;
}

.background {
position: absolute;
display: block;
top 0;
left: 0;
z-index: 0;
}

.nav-wrapper {
  height: 50 px;
  background: linear-gradient(to bottom, #8b0000 , #580000);
}

.top-nav-collapse {
  background-color: #b81b1b;}

.navbar:not(.top-nav-collapse) {background: linear-gradient(360deg, #000000, #000000 );
outline: 4px solid #ffffff;
}

#intro .h6 {
  font-family: "Andale Mono", monospace;
  font-weight: 350;
  line-height: 1.7;
}

header {
  margin-top: 22px;
}

/*use one of these if something's stuck under the nav*/

.spacefromtop {
    position: relative;
    padding-top: 10%;
}

.spacefromtop2 {
    position: relative;
    padding-top: 7%;
}



/*this stuff is the only necessary stuff from legacy.css*/
.c-box{     font-family: 'Andale Mono', monospace; 	position:relative; 	padding:20px 40px; 	background:rgba(49,15,34, 0.8); 	-webkit-box-shadow:1px 2px 3px #000; 	   -moz-box-shadow:1px 2px 3px #111; 	        box-shadow:1px 2px 3px #1d1d1d; 	-webkit-border-radius:.9em;        -moz-border-radius:.9em; 	        border-radius:.9em; } .c-box h1{ 	margin:0 0 12px 0; 	padding:12px 0; 	font-size:24px; 	color:#ffffff; 	border-bottom:2px dotted #ffffff; } .c-box p{ 	margin:0 0 12px 0; 	line-height:1.5em; 	font-size:15px; 	color:#ffffff; } .c-box span{ 	font-weight:bold; } /*Table*/ .table{ 	display:table; 	font-size:12px; 	border-bottom:1px solid #ffffff; 	color:#c3aea2; 	margin:3em auto; }

.d-box{ font-family: 'Andale Mono', monospace; 	position:relative; 	padding:20px 40px; 	  background: rgba(50 ,50 ,50, 0.4); 	-webkit-box-shadow:1px 2px 3px #000; 	   -moz-box-shadow:1px 2px 3px #111; 	        box-shadow:1px 2px 3px #1d1d1d; 	-webkit-border-radius:.9em;        -moz-border-radius:.9em; 	        border-radius:.9em; } .d-box h1{ 	margin:0 0 12px 0; 	padding:12px 0; 	font-size:24px; 	color:#ffffff; 	border-bottom:2px dotted #ffffff; } .d-box p{ 	margin:0 0 12px 0; 	line-height:1.5em; 	font-size:15px; 	color:#ffffff; } .d-box span{ 	font-weight:bold; } /*Table*/ .table{ 	display:table; 	font-size:12px; 	border-bottom:1px solid #ffffff; 	color:#c3aea2; 	margin:3em auto; }

.wrap{ 	width:1000px; 	margin:0 auto; } .logo a{     font-family: 'Righteous', sans-serif; 	margin:20px; 	color:#ffffff; 	font-size:40px; 	float:left; 	text-transform:uppercase; }

/*that's-a all yo 1307132415*/
body {text-decoration:none}

.nobg {background-color: white}

.whitebg::before {
    background: none !important    
}

.whitebg {
    background: white !important;
}
/*this right here is the wallpaper for the site, replace with a file or Base64 (preferably)*/

body{
background-image: url('https://wallpapercave.com/wp/wp3260613.jpg');
background-size: cover;
background-repeat: no-repeat;
background-position: center;
background-attachment: fixed;
color: White;
}
    (function() {
  var corianders = [], moveAngle = 0, animationInterval;
  var browserWidth = document.body.clientWidth;
  var browserHeight = window.innerHeight;
  /**
   * Generates a random color.
   * @method getRandomColor
   * @return {Color}
   */
  function getRandomColor() {
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (i=0; i<6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }
  /**
   * Generates a random number between the min and max (inclusive).
   * @method getRandomNumber
   * @param {Number} min
   * @param {Number} max
   * @return {Number}
   */
  function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  /**
   * Creates a new coriander div and returns it.
   * @method createCoriander
   * @return {HTMLElement}
   */
  function createCoriander() {
    var el = document.createElement('div'), style = el.style;
    style.borderRadius = '0px';
    style.border = getRandomNumber(4, 8) + 'px solid ' + getRandomColor();
    var degrees = getRandomNumber(1, 360);
    style.WebkitTransform = 'rotate(' + degrees + 'deg)';
    style.msTransform = 'rotate(' + degrees + 'deg)'; 
    style.transform = 'rotate(' + degrees + 'deg)';
    style.position = 'fixed';
    style.zIndex = '999999';
    style.opacity = '0.9';
    style.filter = 'alpha(opacity=90)';
    style.boxShadow = '0 0 2px rgba(255,255,255,0.8)';
    style.top = getRandomNumber(0, browserHeight) + 'px';
    style.left = getRandomNumber(0, browserWidth) + 'px';
    return el;
  }
  /**
   * Calls the moveCoriander method for each of the corianders in the cache.
   * @method moveCorianders
   * @return {Void}
   */
  function moveCorianders() {
    var l = corianders.length, i;
    moveAngle += 0.01;
    for (i=0; i<l; i++) {
      moveCoriander(corianders[i]);
    }
  }
  /**
   * Moves an individual coriander element using some simple math.
   * @method moveCoriander
   * @param {HTMLElement} el
   * @return {Void}
   */
  function moveCoriander(el) {
    var style = el.style, height = browserHeight, radius, top;
    radius = parseInt(style.border, 10);
    top = parseInt(style.top, 10);
    top += Math.cos(moveAngle) + 1 + radius/2;
    if (top > height) {
      resetCoriander(el);
    } else {
      style.top = top + 'px';
    }
  }
  /**
   * Puts the coriander back at the top in a random horizontal start position.
   * @method resetCoriander
   * @param {HTMLElement} el
   * @return {Void}
   */
  function resetCoriander(el) {
    var style = el.style;
    style.top = '0px';
    style.left = getRandomNumber(0, browserWidth) + 'px';
  }
  /**
   * The kick-off method. Asks how many corianders to make and then makes them!
   * @method setup
   * @return {Void}
   */
  function setup() {
    var number = prompt('How many corianders would you like?'), particle, i;
    // var number = 150, particle, i;
    // Setup snow particles
    for (i=0; i<number; i++) {
      particle = corianders[i] = createCoriander();
      document.body.appendChild(particle);
    }
    // Set animation intervals
    animationInterval = setInterval(moveCorianders, 33);
  }
  setup();
}());
